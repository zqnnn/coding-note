//
// Created by zqn on 2019/3/16.
//
#include <iostream>

//求从 1 到 n 的整数中 1 出现的次数
//题目：输入一个整数 n 求从 1 到 n 这 n 个整数的十进制表示中 1 出现的次数。
//举例说明：
//例如输入 12 ，从 1 到 12 这些整数中包含 1 的数字有 1、10、11 和 12，1 一共出现了 5 次。



//方法一
//一种是从1到n遍历，每次通过对10求余数判断整数的个位数字是不是1，大于10的除以10之后再判断。
// 我们对每个数字都要做除法和求余运算以求出该数字中1出现的次数。
// 如果输入数字n，n有O(logn)位，我们需要判断每一位是不是1，那么时间复杂度为O(n*logn)。
//int NumberOf1(int n)
//{
//    int m, a, count = 0;
//    if(n <= 0)
//        return 0;
//    while(n >= 1)
//    {
//        m = n % 10;
//        a = n / 10;
//        if(m == 1){
//            count++;
//        }
//        n = a;
//    }
//    return count;
//}
//
//int NumberOf1Between1AndN_Solution(int n){
//    int count = 0;
//    for(int i = 1; i <= n; i++){
//        count = count + NumberOf1(i);
//    }
//    return count;
//}


//方法二
// 设定整数点（如1， 10， 100等）作为位置点i（对应n的个位，十位，百位）分别对每个数位上包含1的点进行分析
// 根据设定的整数位置，对n进行分割，分成高位n/i, 低位n%i
// （1）当i表示百位，且百位对应的数>=2，如n=31456, i=100, 则a=314, b=56
// 此时百位为1的次数有a/10 + 1 = 32(最高两位为0~31)，每一次都包含100个连续点，所以共有（a/10 + 1） * 100个点的百位为1
// （2）当i表示百位，且百位对应的数为1，如n=31156, i=100, 则a=311, b=56
//此时百位对应的就是1,共有a/10是包含100个连续点，当最高位为31时，对应局部点00~56，共b+1次，所以加起来共有（a/10 * 100） + (b+1)次
// (3) 当i表示百位，且百位对应的数为0,如n=31056,i=100，则a=310,b=56，此时百位为1的次数有a/10=31（最高两位0~30）
// 综合以上三种情况，当百位对应0或>=2时，有(a+8)/10次包含所有100个点，还有当百位为1(a%10==1)，需要增加局部点b+1
//之所以补8，是因为当百位为0，则a/10==(a+8)/10，当百位>=2，补8会产生进位位，效果等同于(a/10+1)

int NumberOf1Between1AndN_Solution(int n){
    int count = 0;
    int i = 1;
    for(i = 1; i <= n; i *= 10){
        //i表示当前分析的是哪个数位
        int a = n / i;
        int b = n % i;
        count = count + (a + 8)/10 * i + (a%10 == 1) * (b+1);
    }
    return count;
}



int main(){
    int n = 231;
    int count = NumberOf1Between1AndN_Solution(n);
    std::cout << count << std::endl;
}